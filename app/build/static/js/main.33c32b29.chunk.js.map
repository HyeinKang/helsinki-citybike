{"version":3,"sources":["components/MapboxGLButtonControl.js","components/StationPopover.js","components/Map.js","components/Accordion.js","components/StationPopup.js","components/CityBikeInfo.js","App.js","serviceWorker.js","index.js"],"names":["MapboxGLButtonControl","map","this","_btn","document","createElement","className","props","type","innerHTML","title","onclick","eventHandler","_container","appendChild","parentNode","removeChild","_map","undefined","React","Component","StationPopover","name","indicator","isLoading","bikeAvailability","stationCapability","onClick","selectedStation","stationId","stationName","updateSelectedStation","xmlns","height","viewBox","width","d","fill","MapboxMap","ReactMapboxGl","accessToken","Map","state","center","zoom","minZoom","maxZoom","nextProps","nextState","boundsUpdated","_","isEqual","bounds","locationUpdated","locations","isLoadingUpdated","updateBounds","StationsInfo","location","bikesAvailable","spacesAvailable","bikePercentage","coordinates","lon","lat","key","style","containerStyle","window","innerHeight","onStyleLoad","refreshCtrl","getBounds","geolocate","GeolocateControl","positionOptions","enableHighAccuracy","showUserLocation","addControl","isMobile","setTimeout","trigger","onMoveEnd","attributionControl","id","layout","position","Accordion","useState","isOpen","setIsOpen","heading","disclaimer","children","StationPopup","toggleOpenState","setState","singularOrPlural","amount","singular","plural","word","averageBikesToday","bikeTrends","dayNumber","moment","tz","day","bikeTrendsUpdated","dayNumberUpdated","averageBikesTodayUpdated","that","axios","get","then","res","data","hour","labels","datasets","label","backgroundColor","currentHour","colorsArray","i","push","borderWidth","barThickness","barPercentage","categoryPercentage","hoverBackgroundColor","format","options","responsive","maintainAspectRatio","padding","left","right","top","bottom","scales","xAxes","ticks","beginAtZero","stepSize","suggestedMin","suggestedMax","yAxes","gridLines","drawOnChartArea","asyncForEach","array","callback","a","index","length","CityBikeInfo","allStations","setAllStations","stations","setStations","setBounds","setIsLoading","setSelectedStation","client","useApolloClient","GET_ALL_STATIONS","gql","STAIONS_INFO","useEffect","query","bikeRentalStations","getAllStations","northMost","_ne","lng","eastMost","southMost","_sw","westMost","visibleStations","forEach","station","lonInsideBound","latInsideBound","stationIds","getStationInfo","processBounds","stationsArray","variables","bikeRentalStation","newStation","oldStation","newBounds","oldBounds","ApolloClient","uri","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.33c32b29.chunk.js","sourcesContent":["import React from 'react';\n\n/* Idea from Stack Overflow https://stackoverflow.com/a/51683226  */\nclass MapboxGLButtonControl extends React.Component {\n  onAdd(map) {\n    this._btn = document.createElement(\"button\");\n    this._btn.className = `mapboxgl-ctrl-icon ${this.props.className}`;\n    this._btn.type = \"button\";\n    this._btn.innerHTML = this.props.innerHTML || \"\";\n    this._btn.title = this.props.title;\n    this._btn.onclick = this.props.eventHandler;\n\n    this._container = document.createElement(\"div\");\n    this._container.className = \"mapboxgl-ctrl-group mapboxgl-ctrl\";\n    this._container.appendChild(this._btn);\n\n    return this._container;\n  }\n\n  onRemove() {\n    this._container.parentNode.removeChild(this._container);\n    this._map = undefined;\n  }\n}\n\nexport default MapboxGLButtonControl;","import React from 'react';\n\nconst StationPopover = (props) => {\n  const updateSelectedStation = () => {\n    const selectedStation = {\n      stationId: props.stationId,\n      stationName: props.name,\n      stationCapability: props.stationCapability,\n      bikeAvailability: props.bikeAvailability,\n    }\n    props.updateSelectedStation(selectedStation);\n  }\n  return (\n    <div>\n      <div>\n        <div className=\"station-name\"><span>{props.name}</span> <div className={`${props.indicator}  ${props.isLoading ? \"is-loading\" : \"\"} indicator`}></div></div>\n        <div className=\"station-availity\">\n          <div className=\"avilability\">{props.bikeAvailability}<span className=\"divider\">/</span>{props.stationCapability}</div>\n          <div className=\"more-info\" onClick={updateSelectedStation}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n              <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n              <path d=\"M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8-8-8z\" />\n            </svg>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default StationPopover;","import React from 'react';\nimport _ from 'lodash';\nimport { isMobile } from \"react-device-detect\";\nimport { GeolocateControl } from \"mapbox-gl\";\nimport ReactMapboxGl, { Layer, Feature, Popup, ZoomControl } from 'react-mapbox-gl';\n\nimport MapboxGLButtonControl from \"./MapboxGLButtonControl\";\nimport StationPopover from \"./StationPopover\";\n\nconst MapboxMap = ReactMapboxGl({\n  accessToken: 'pk.eyJ1IjoiaGVpbmEta2FuZyIsImEiOiJja2FhNGppb2IwdDNqMnZxd3h1bnFja2NhIn0.si285aYkKGq4jcOjvpryzw',\n});\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      center: [24.941531, 60.170676],\n      zoom: [16],\n      minZoom: [15],\n      maxZoom: [17]\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const boundsUpdated = !_.isEqual(this.state.bounds, nextState.bounds)\n    const locationUpdated = !_.isEqual(this.props.locations, nextProps.locations)\n    const isLoadingUpdated= !_.isEqual(this.props.isLoading, nextProps.isLoading)\n    return boundsUpdated || locationUpdated || isLoadingUpdated;\n  }\n\n  render() {\n    const { updateBounds, locations, isLoading, updateSelectedStation } = this.props;\n\n    const onMapLoad = map => {\n      /* Instantiate new controls with custom event handlers */\n      const refreshCtrl = new MapboxGLButtonControl({\n        title: \"Refresh the station information\",\n        innerHTML: `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"black\" width=\"18px\" height=\"18px\">\n                      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n                      <path\n                        d=\"M17.65 6.35c-1.63-1.63-3.94-2.57-6.48-2.31-3.67.37-6.69 3.35-7.1 7.02C3.52 15.91 7.27 20 12 20c3.19 0 5.93-1.87 7.21-4.56.32-.67-.16-1.44-.9-1.44-.37 0-.72.2-.88.53-1.13 2.43-3.84 3.97-6.8 3.31-2.22-.49-4.01-2.3-4.48-4.52C5.31 9.44 8.26 6 12 6c1.66 0 3.14.69 4.22 1.78l-1.51 1.51c-.63.63-.19 1.71.7 1.71H19c.55 0 1-.45 1-1V6.41c0-.89-1.08-1.34-1.71-.71l-.64.65z\" />\n                    </svg>`,\n        eventHandler: () => {updateBounds(map.getBounds())}\n      });\n      const geolocate = new GeolocateControl({\n        positionOptions: {\n          enableHighAccuracy: true\n        },\n        showUserLocation: true,\n      });\n  \n      map.addControl(refreshCtrl, 'top-right');\n\n      if (isMobile) {\n        map.addControl(geolocate, 'top-left');\n        setTimeout(()=>{\n          geolocate.trigger();\n        }, 500)\n      }\n\n      updateBounds(map.getBounds());\n    };\n\n    function StationsInfo({location}) {\n      const stationCapability = location.bikesAvailable + location.spacesAvailable;\n      const bikeAvailability = location.bikesAvailable;\n\n      const bikePercentage = bikeAvailability / stationCapability * 100;\n      const indicator = bikePercentage > 50 ? \"safe\" : bikePercentage > 0 ? \"warning\" : \"bad\";\n\n      return (\n        <Popup coordinates={[location.lon, location.lat]} key={location.stationId} >\n          <StationPopover\n            name={location.name}\n            stationId={location.stationId}\n            indicator={indicator}\n            isLoading={isLoading}\n            bikeAvailability={bikeAvailability}\n            stationCapability={stationCapability}\n            updateSelectedStation={updateSelectedStation}\n          />\n        </Popup>\n      )\n    }\n    return (\n      <div>\n        <MapboxMap\n            style=\"mapbox://styles/heina-kang/ckahkdlxb014m1itfktw9kt6s\"\n            center={this.state.center}\n            zoom={this.state.zoom}\n            minZoom={this.state.minZoom}\n            maxZoom={this.state.maxZoom}\n            containerStyle={{\n              width: '100vw',\n              height: window.innerHeight\n            }}\n            onStyleLoad={onMapLoad}\n            onMoveEnd={(map) => {updateBounds(map.getBounds())}}\n            attributionControl={false}\n          >\n            <Layer type=\"symbol\" id=\"marker\" layout={{ 'icon-image': 'bicycle-15' }}>\n              { locations.map((location) => (\n                <Feature coordinates={[location.lon, location.lat]} key={location.stationId} />\n              ))}\n            </Layer>\n          { locations.map((location) => (\n            <StationsInfo key={location.stationId} location={location} />\n          ))}\n          <ZoomControl position=\"bottom-right\" />\n        </MapboxMap>\n      </div>\n    );\n  }\n}\n\nexport default Map;","import React, { useState } from 'react';\n\nconst Accordion = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    // <div className={`${isOpen ? 'is-open' : ''} accordion`}>\n    <div className={`is-open accordion`}>\n      <div className=\"accordion__header\" onClick={() => {setIsOpen(!isOpen)}}>\n        <div>\n          <p>{props.heading}</p>\n          <p className=\"disclaimer\">\n            {props.disclaimer}\n          </p>\n        </div>\n        {/* <div>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n            <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n            <path d=\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\"/>\n          </svg>\n        </div> */}\n      </div>\n      <div className=\"accordion__body\">\n        {props.children}\n      </div>\n    </div>\n  );\n}\n\nexport default Accordion;","import React from 'react';\nimport _ from 'lodash';\nimport axios from 'axios';\nimport moment from 'moment-timezone';\nimport {HorizontalBar} from 'react-chartjs-2';\nimport Accordion from './Accordion';\n\nclass StationPopup extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      averageBikesToday: \"...\",\n      bikeTrends: [],\n      dayNumber: moment().tz(\"Europe/Helsinki\").day()\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const bikeTrendsUpdated = !_.isEqual(this.state.bikeTrends, nextState.bikeTrends)\n    const dayNumberUpdated = !_.isEqual(this.state.dayNumber, nextState.dayNumber)\n    const averageBikesTodayUpdated = !_.isEqual(this.state.averageBikesToday, nextState.averageBikesToday)\n    return bikeTrendsUpdated || dayNumberUpdated || averageBikesTodayUpdated;\n  }\n\n  toggleOpenState = () => {\n    this.setState({'isOpen': !this.state.isOpen});\n  }\n\n  updateSelectedStation = () => {\n    this.props.updateSelectedStation();\n  }\n\n  singularOrPlural = (amount, singular, plural) => {\n    let word = singular;\n\n    if(amount > 1) {\n      word = plural;\n    }\n\n    return word;\n  }\n\n  render() {\n    const { stationId, stationName, stationCapability, bikeAvailability } = this.props.selectedStation;\n    const that = this;\n\n    axios.get(`api/trends/${stationId}/${this.state.dayNumber}`)\n    .then(res => {\n      that.setState({'bikeTrends': res.data}); // [{averageBikesAvailable: 1, time:0}]\n      if(that.state.averageBikesToday === \"...\") {\n        that.setState({'averageBikesToday': _.map(res.data, 'averageBikesAvailable')[moment().tz(\"Europe/Helsinki\").hour()]});\n      }\n    })\n\n    const chartBgColors = () => {\n      const baseColor = 'rgba(242, 188, 25, 0.2)';\n      const highlightColor = 'rgba(242, 188, 25, 0.6)';\n      const currentHour = moment().tz(\"Europe/Helsinki\").hour();\n\n      let colorsArray = [];\n      for (var i = 0; i <= 23; i++) {\n        colorsArray.push(baseColor);\n      }\n      colorsArray[currentHour] = highlightColor;\n\n      return colorsArray;\n    }\n\n    const data = {\n      labels: _.map(this.state.bikeTrends, 'time'),\n      datasets: [\n        {\n          label: 'Available bikes',\n          backgroundColor: chartBgColors,\n          borderWidth: 0,\n          barThickness: 'flex',\n          barPercentage: 1,\n          categoryPercentage: 1,\n          hoverBackgroundColor: 'rgba(242, 188, 25, 0.4)',\n          data: _.map(this.state.bikeTrends, 'averageBikesAvailable')\n        }\n      ]\n    };\n\n    const chartOptions = {\n      responsive: true,\n      maintainAspectRatio : false,\n      layout: {\n          padding: {\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0\n          }\n      },\n      scales: {\n        xAxes: [{\n          position: 'top',\n          ticks: {\n            beginAtZero: true,\n            stepSize: 5,\n            suggestedMin: 5,\n            suggestedMax: 10\n          }\n        }],\n        yAxes: [{\n          gridLines: {\n            // display: false,\n            // drawBorder: false,\n            drawOnChartArea: false\n          },\n        }],\n      }\n    }\n\n    const daySwitcher = () => {\n      const daysOfTheWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n      const decreaseDayNumber = () => {\n        if (this.state.dayNumber === 0) {\n          that.setState({dayNumber: 6});\n        } else {\n          that.setState({dayNumber: this.state.dayNumber - 1});\n        }\n      }\n\n      const increaseDayNumber = () => {\n        if (this.state.dayNumber === 6) {\n          that.setState({dayNumber: 0});\n        } else {\n          that.setState({dayNumber: this.state.dayNumber + 1});\n        }\n      }\n\n      return (\n        <div className=\"selected-day\">\n          <div className=\"button\" onClick={decreaseDayNumber}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n              <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n              <path d=\"M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z\" />\n            </svg>\n          </div>\n          <div>{daysOfTheWeek[this.state.dayNumber]}</div>\n          <div className=\"button\" onClick={increaseDayNumber}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n              <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n              <path d=\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\" />\n            </svg>\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"station-info-popup\">\n        <div className=\"station-info-content\">\n          <div className=\"station-info-content__header\">\n            <div>\n              <h2>{stationName}</h2>\n              {/* <p>N meters away</p> */}\n            </div>\n            <div className=\"close\" onClick={this.updateSelectedStation}>\n              <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n                <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n                <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\" />\n              </svg>\n            </div>\n          </div>\n          <div className=\"station-info-content__content\">\n            <ul className=\"accordion-list\">\n              <li className=\"accordion-list__item\">\n                <Accordion\n                  heading={`Station bike capacity: ${bikeAvailability} / ${stationCapability}`}\n                  disclaimer={`${this.state.averageBikesToday} ${this.singularOrPlural(this.state.averageBikesToday, 'bike is', 'bikes are')} usually available at ${moment().tz(\"Europe/Helsinki\").format('h a, dddd')}s`}\n                >\n                  <div className=\"trend-header\">\n                    <h3>Availability Trend</h3>\n                    {daySwitcher()}\n                  </div>\n                  <div className=\"trend-chart\">\n                    <HorizontalBar data={data} height={400} options={chartOptions} />\n                  </div>\n                </Accordion>\n              </li>\n              {/* <li>\n                <Accordion\n                  heading=\"There are 2 comments about this station\"\n                  disclaimer=\"Only comments published within 24 hours will be displayed\"\n                >\n                  <div className=\"comment-wall\">\n                    <h3 className=\"header\">Comments</h3>\n                    <ul className=\"comments\">\n                      <li className=\"comment\">\n                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n                        <div className=\"comment__publisher\">Some name, <span>16h ago</span></div>\n                      </li>\n                      <li className=\"comment\">\n                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec malesuada neque sed eros pretium vehicula. Proin nec dictum dui. Nunc est orci, accumsan at semper et, iaculis dapibus est. Vestibulum vulputate leo vitae lectus scelerisque, at viverra fusce.</p>\n                        <div className=\"comment__publisher\">Some name, <span>10h ago</span></div>\n                      </li>\n                    </ul>\n                  </div>\n                  <div className=\"comment-input\">\n                    <input type=\"text\" maxLength=\"255\" placeholder=\"Add comment...\" />\n                    <button>\n                      <div className=\"icon\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n                          <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n                          <path d=\"M2.01 21L23 12 2.01 3 2 10l15 2-15 2z\" />\n                        </svg>\n                      </div>\n                    </button>\n                  </div>\n                </Accordion>\n              </li> */}\n            </ul>\n          </div>\n          {/* <div className=\"get-direction\">\n            <button>Get direction</button>\n          </div> */}\n        </div>\n        <div className=\"station-info-bg\" onClick={this.updateSelectedStation}></div>\n      </div>\n    );\n  }\n}\n\nexport default StationPopup;","import React, { useEffect, useState } from 'react';\nimport { useApolloClient } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport _ from 'lodash';\n\nimport Map from './Map';\nimport StationPopup from './StationPopup';\n\nasync function asyncForEach(array, callback) {\n  for (let index = 0; index < array.length; index++) {\n    await callback(array[index], index, array);\n  }\n}\n\nconst CityBikeInfo = () => {\n  // const stationIds = [133, 134, 290];\n  const [allStations, setAllStations] = useState(null);\n  const [stations, setStations] = useState([]);\n  const [bounds, setBounds] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedStation, setSelectedStation] = useState(null);\n  const client = useApolloClient();\n\n  const GET_ALL_STATIONS = gql`\n  query getAllStations {\n    bikeRentalStations {\n      stationId\n      lat\n      lon\n    }\n  }\n  `\n  const STAIONS_INFO = gql`\n  query getStation($id: String!) {\n    bikeRentalStation(id:$id) {\n      stationId\n      name\n      bikesAvailable\n      spacesAvailable\n      lat\n      lon\n    }\n  }\n  `\n  \n  const processBounds = () => {\n    if (!bounds) return false;\n    setIsLoading(true);\n\n    const northMost = bounds._ne.lng;\n    const eastMost = bounds._ne.lat;\n    const southMost = bounds._sw.lng;\n    const westMost = bounds._sw.lat;\n\n    let visibleStations = [];\n    !!allStations && allStations.forEach((station) => {\n      const lonInsideBound = northMost >= station.lon && station.lon >= southMost;\n      const latInsideBound = eastMost >= station.lat && station.lat >= westMost;\n      if(lonInsideBound && latInsideBound) {\n        visibleStations = [...visibleStations, station]\n      }\n    });\n\n    const stationIds = _.map(visibleStations, 'stationId');\n    getStationInfo(stationIds);\n  }\n\n  useEffect(() => {\n    if (!allStations) {\n      const getAllStations = async () => {\n        const { data } = await client.query({\n          query: GET_ALL_STATIONS,\n        });\n        setAllStations(data.bikeRentalStations);\n      }\n      getAllStations();\n    }\n    if(!!bounds) {\n      processBounds();\n    }\n  }, [bounds, allStations, client, GET_ALL_STATIONS])\n\n  let stationsArray = [];\n  const getStationInfo = async (stationIds) => {\n    await asyncForEach(stationIds, async (id) => {\n      const { data } = await client.query({\n        query: STAIONS_INFO,\n        variables: {id},\n      });\n      stationsArray = [...stationsArray, data.bikeRentalStation];\n    });\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 30)\n\n    setStations([...stationsArray])\n  }\n\n  const updateBounds = (newBounds, oldBounds) => {\n    setBounds(newBounds);\n  }\n\n  const updateSelectedStation = (newStation, oldStation) => {\n    setSelectedStation(newStation);\n  }\n\n  const height = window.innerHeight;\n\n  return (\n    <div style={{'height': height}}>\n      { !!selectedStation && (<StationPopup updateSelectedStation={updateSelectedStation} selectedStation={selectedStation} />) }\n      <Map locations={stations} isLoading={isLoading} updateBounds={updateBounds} updateSelectedStation={updateSelectedStation} />\n    </div>\n  );\n}\n\nexport default CityBikeInfo;","import React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nimport './App.scss';\nimport CityBikeInfo from './components/CityBikeInfo';\n\nconst client = new ApolloClient({\n  uri: 'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql',\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div>\n        <CityBikeInfo />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}